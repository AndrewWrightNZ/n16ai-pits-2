/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SessionImport } from './routes/session'
import { Route as SceneImport } from './routes/scene'
import { Route as PubLabelsImport } from './routes/pub-labels'
import { Route as OneHundredImport } from './routes/one-hundred'
import { Route as FinderImport } from './routes/finder'
import { Route as AreasListImport } from './routes/areas-list'
import { Route as AreaSizerImport } from './routes/area-sizer'
import { Route as AreaIdentifierImport } from './routes/area-identifier'
import { Route as AdminImport } from './routes/admin'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SessionRoute = SessionImport.update({
  id: '/session',
  path: '/session',
  getParentRoute: () => rootRoute,
} as any)

const SceneRoute = SceneImport.update({
  id: '/scene',
  path: '/scene',
  getParentRoute: () => rootRoute,
} as any)

const PubLabelsRoute = PubLabelsImport.update({
  id: '/pub-labels',
  path: '/pub-labels',
  getParentRoute: () => rootRoute,
} as any)

const OneHundredRoute = OneHundredImport.update({
  id: '/one-hundred',
  path: '/one-hundred',
  getParentRoute: () => rootRoute,
} as any)

const FinderRoute = FinderImport.update({
  id: '/finder',
  path: '/finder',
  getParentRoute: () => rootRoute,
} as any)

const AreasListRoute = AreasListImport.update({
  id: '/areas-list',
  path: '/areas-list',
  getParentRoute: () => rootRoute,
} as any)

const AreaSizerRoute = AreaSizerImport.update({
  id: '/area-sizer',
  path: '/area-sizer',
  getParentRoute: () => rootRoute,
} as any)

const AreaIdentifierRoute = AreaIdentifierImport.update({
  id: '/area-identifier',
  path: '/area-identifier',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/area-identifier': {
      id: '/area-identifier'
      path: '/area-identifier'
      fullPath: '/area-identifier'
      preLoaderRoute: typeof AreaIdentifierImport
      parentRoute: typeof rootRoute
    }
    '/area-sizer': {
      id: '/area-sizer'
      path: '/area-sizer'
      fullPath: '/area-sizer'
      preLoaderRoute: typeof AreaSizerImport
      parentRoute: typeof rootRoute
    }
    '/areas-list': {
      id: '/areas-list'
      path: '/areas-list'
      fullPath: '/areas-list'
      preLoaderRoute: typeof AreasListImport
      parentRoute: typeof rootRoute
    }
    '/finder': {
      id: '/finder'
      path: '/finder'
      fullPath: '/finder'
      preLoaderRoute: typeof FinderImport
      parentRoute: typeof rootRoute
    }
    '/one-hundred': {
      id: '/one-hundred'
      path: '/one-hundred'
      fullPath: '/one-hundred'
      preLoaderRoute: typeof OneHundredImport
      parentRoute: typeof rootRoute
    }
    '/pub-labels': {
      id: '/pub-labels'
      path: '/pub-labels'
      fullPath: '/pub-labels'
      preLoaderRoute: typeof PubLabelsImport
      parentRoute: typeof rootRoute
    }
    '/scene': {
      id: '/scene'
      path: '/scene'
      fullPath: '/scene'
      preLoaderRoute: typeof SceneImport
      parentRoute: typeof rootRoute
    }
    '/session': {
      id: '/session'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof SessionImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRoute
  '/area-identifier': typeof AreaIdentifierRoute
  '/area-sizer': typeof AreaSizerRoute
  '/areas-list': typeof AreasListRoute
  '/finder': typeof FinderRoute
  '/one-hundred': typeof OneHundredRoute
  '/pub-labels': typeof PubLabelsRoute
  '/scene': typeof SceneRoute
  '/session': typeof SessionRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRoute
  '/area-identifier': typeof AreaIdentifierRoute
  '/area-sizer': typeof AreaSizerRoute
  '/areas-list': typeof AreasListRoute
  '/finder': typeof FinderRoute
  '/one-hundred': typeof OneHundredRoute
  '/pub-labels': typeof PubLabelsRoute
  '/scene': typeof SceneRoute
  '/session': typeof SessionRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRoute
  '/area-identifier': typeof AreaIdentifierRoute
  '/area-sizer': typeof AreaSizerRoute
  '/areas-list': typeof AreasListRoute
  '/finder': typeof FinderRoute
  '/one-hundred': typeof OneHundredRoute
  '/pub-labels': typeof PubLabelsRoute
  '/scene': typeof SceneRoute
  '/session': typeof SessionRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/area-identifier'
    | '/area-sizer'
    | '/areas-list'
    | '/finder'
    | '/one-hundred'
    | '/pub-labels'
    | '/scene'
    | '/session'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin'
    | '/area-identifier'
    | '/area-sizer'
    | '/areas-list'
    | '/finder'
    | '/one-hundred'
    | '/pub-labels'
    | '/scene'
    | '/session'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/area-identifier'
    | '/area-sizer'
    | '/areas-list'
    | '/finder'
    | '/one-hundred'
    | '/pub-labels'
    | '/scene'
    | '/session'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRoute
  AreaIdentifierRoute: typeof AreaIdentifierRoute
  AreaSizerRoute: typeof AreaSizerRoute
  AreasListRoute: typeof AreasListRoute
  FinderRoute: typeof FinderRoute
  OneHundredRoute: typeof OneHundredRoute
  PubLabelsRoute: typeof PubLabelsRoute
  SceneRoute: typeof SceneRoute
  SessionRoute: typeof SessionRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRoute,
  AreaIdentifierRoute: AreaIdentifierRoute,
  AreaSizerRoute: AreaSizerRoute,
  AreasListRoute: AreasListRoute,
  FinderRoute: FinderRoute,
  OneHundredRoute: OneHundredRoute,
  PubLabelsRoute: PubLabelsRoute,
  SceneRoute: SceneRoute,
  SessionRoute: SessionRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/admin",
        "/area-identifier",
        "/area-sizer",
        "/areas-list",
        "/finder",
        "/one-hundred",
        "/pub-labels",
        "/scene",
        "/session"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/area-identifier": {
      "filePath": "area-identifier.tsx"
    },
    "/area-sizer": {
      "filePath": "area-sizer.tsx"
    },
    "/areas-list": {
      "filePath": "areas-list.tsx"
    },
    "/finder": {
      "filePath": "finder.tsx"
    },
    "/one-hundred": {
      "filePath": "one-hundred.tsx"
    },
    "/pub-labels": {
      "filePath": "pub-labels.tsx"
    },
    "/scene": {
      "filePath": "scene.tsx"
    },
    "/session": {
      "filePath": "session.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
